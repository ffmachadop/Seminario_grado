# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hc12Piwqeg8ZwxSCb9Oy7bFvpzVYXZWr
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Título de la aplicación
st.title("Herramienta de Análisis de Alertas Tempranas")

# Subir el archivo en Streamlit
uploaded_file = st.file_uploader("Sube el archivo de datos", type="xlsx")

if uploaded_file:
    # Cargar datos
    df = pd.read_excel(uploaded_file)
    st.write("Primeras filas del conjunto de datos:")
    st.write(df.head())
    st.write("Información general del conjunto de datos:")
    st.write(df.info())

    # Preprocesamiento de datos
    df.dropna(inplace=True)
    df['MOMENTO 1'] = pd.to_numeric(df['MOMENTO 1'], errors='coerce')
    df['MOMENTO 2'] = pd.to_numeric(df['MOMENTO 2'], errors='coerce')

    # Filtrar datos para alertas
    alertas = df[
        (df['MOMENTO 1'] < 3.0) |
        ((df['FALLAS MOMENTO1'] >= 3) & (df['FALLAS MOMENTO1'] <= 5)) |
        (df['MOMENTO 2'] < 3.0) |
        ((df['FALLAS MOMENTO2'] >= 3) & (df['FALLAS MOMENTO2'] <= 5))
    ]
    st.write("DataFrame de alertas:")
    st.write(alertas)

    # Crear DataFrame de alertas únicas
    alertas_unicos = alertas.drop_duplicates(subset='ID')
    st.write("Alertas únicas por ID:")
    st.write(alertas_unicos)

    # Exportar DataFrame de alertas únicas como CSV
    csv = alertas_unicos.to_csv(index=False)
    st.download_button(
        label="Descargar alertas únicas CSV",
        data=csv,
        file_name="alertas_unicas.csv",
        mime="text/csv"
    )

    # Preparar los datos para el modelo predictivo
    X = df.drop(columns=['ESTADO'])
    y = df['ESTADO']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Entrenar modelo
    modelo_rf = RandomForestClassifier(n_estimators=100, random_state=42)
    modelo_rf.fit(X_train, y_train)
    predicciones = modelo_rf.predict(X_test)

    # Calcular métricas y mostrar resultados
    precision = accuracy_score(y_test, predicciones)
    st.write(f"Precisión del modelo: {precision}")

    st.write("Reporte de clasificación:")
    st.text(classification_report(y_test, predicciones))

    # Matriz de confusión
    matriz_confusion = confusion_matrix(y_test, predicciones)
    plt.figure(figsize=(8, 6))
    sns.heatmap(matriz_confusion, annot=True, fmt="d", cmap="Blues",
                xticklabels=["Clase 0 (Predicha)", "Clase 1 (Predicha)"],
                yticklabels=["Clase 0 (Real)", "Clase 1 (Real)"])
    plt.title("Matriz de Confusión")
    plt.xlabel("Clase Predicha")
    plt.ylabel("Clase Real")
    st.pyplot(plt)